<% include ./partials/header.ejs %>

<div class="bg-[#1a1a1a] w-full min-h-screen text-white flex flex-col md:flex-row">
  <!-- Left: Order Form -->
  <!-- Payment Method -->
  
  <div class="w-full md:w-1/2 p-6 flex items-center justify-center">
    <div class="bg-[#282828] p-8 rounded-lg shadow-lg w-full max-w-md">
      <h2 class="text-3xl font-extrabold mb-6 text-[#d4af37]">Order Your Coffee</h2>
      <form id="coffee-order-form" class="space-y-6" method="post" action="/order">
        <!-- Coffee Type -->
        <div class="flex flex-col">
          <label for="coffee-type" class="text-lg mb-2">Type of Coffee</label>
          <select id="coffee-type" class="p-3 bg-[#333] border border-[#555] rounded-md focus:outline-none focus:ring-2 focus:ring-[#d4af37]">
            <option value="">Select a coffee type</option>
            <option value="espresso">Espresso</option>
            <option value="latte">Latte</option>
            <option value="cappuccino">Cappuccino</option>
            <option value="americano">Americano</option>
          </select>
        </div>
        <!-- Quantity -->
        <div class="flex flex-col">
          <label for="coffee-quantity" class="text-lg mb-2">Quantity</label>
          <input type="number" id="coffee-quantity" min="1" class="p-3 bg-[#333] border border-[#555] rounded-md focus:outline-none focus:ring-2 focus:ring-[#d4af37]" placeholder="Enter quantity">
        </div>
        <!-- Size -->
        <div class="flex flex-col">
          <label for="coffee-size" class="text-lg mb-2">Size</label>
          <select id="coffee-size" class="p-3 bg-[#333] border border-[#555] rounded-md focus:outline-none focus:ring-2 focus:ring-[#d4af37]">
            <option value="">Select a size</option>
            <option value="small">Small</option>
            <option value="medium">Medium</option>
            <option value="large">Large</option>
          </select>
        </div>
        <!-- Shipping Address -->
        <div class="flex flex-col">
          <label for="shipping-address" class="text-lg mb-2">Shipping Address</label>
          <textarea id="shipping-address" rows="3" class="p-3 bg-[#333] border border-[#555] rounded-md focus:outline-none focus:ring-2 focus:ring-[#d4af37]" placeholder="Enter your full shipping address"></textarea>
        </div>
        <!-- Payment Method -->
        <div class="flex flex-col">
          <label for="payment-method" class="text-lg mb-2">Payment Method</label>
          <select id="payment-method" class="p-3 bg-[#333] border border-[#555] rounded-md focus:outline-none focus:ring-2 focus:ring-[#d4af37]">
            <option value="">Select a payment method</option>
            <option value="credit-card">Credit Card</option>
            <option value="debit-card">Debit Card</option>
            <option value="paypal">PayPal</option>
            <option value="apple-pay">Apple Pay</option>
            <option value="google-pay">Google Pay</option>
          </select>
        </div>
        <!-- Phone Number -->
        <div class="flex flex-col">
          <label for="phone-number" class="text-lg mb-2">Phone Number</label>
          <input type="tel" id="phone-number" class="p-3 bg-[#333] border border-[#555] rounded-md focus:outline-none focus:ring-2 focus:ring-[#d4af37]" placeholder="Enter your phone number">
        </div>
        <!-- Special Instructions -->
        <div class="flex flex-col">
          <label for="special-instructions" class="text-lg mb-2">Special Instructions</label>
          <textarea id="special-instructions" rows="2" class="p-3 bg-[#333] border border-[#555] rounded-md focus:outline-none focus:ring-2 focus:ring-[#d4af37]" placeholder="Any special instructions for your order"></textarea>
        </div>
        <!-- Submit Button -->
        <button type="submit" class="w-full py-3 bg-[#d4af37] text-black font-bold rounded-md hover:bg-[#b6942b] transition-colors">
          Place Order
        </button>
      </form>
      <!-- Order Confirmation -->
      <div id="order-confirmation" class="mt-6 space-y-4"></div>
    </div>
  </div>

  <!-- Right: Map -->
  <div class="w-full md:w-1/2 p-6">
    <div id="map" class="w-full h-[600px] rounded-lg shadow-lg"></div>
  </div>
</div>

<% include ./partials/footer.ejs %>



<script>
   // Foursquare API key with 'Bearer' prefix
   const FOURSQUARE_API_KEY = 'fsq3jkViBY9XEL+wRrRtY6rvIEgrhsp7rhuEDZqeA0VBLhk=';

   async function placeSearch(latitude, longitude) {
    const options = {
      method: 'GET',
      headers: {
        accept: 'application/json',
        Authorization: `Bearer ${FOURSQUARE_API_KEY}`, // Correct format with 'Bearer' prefix
      }
    };

    try {
      const searchParams = new URLSearchParams({
        query: 'coffee',
        ll: `${latitude},${longitude}`,
        open_now: 'true',
        sort: 'DISTANCE',
        categories: '13034'
      });
      
      const response = await fetch(`https://api.foursquare.com/v3/places/search?${searchParams}`, options);

      if (!response.ok) {
        const errorText = await response.text();
        console.error('HTTP error!', response.status, errorText);
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      console.log('API response:', data); // Log the entire response for debugging

      return Array.isArray(data.results) ? data.results : [];
    } catch (err) {
      console.error('Error fetching coffee shops', err);
      return [];
    }
  }

  document.addEventListener("DOMContentLoaded", () => {
    const map = L.map('map').setView([51.505, -0.09], 13); 

    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
    }).addTo(map);

    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        async (position) => {
          const { latitude, longitude } = position.coords;
          map.setView([latitude, longitude], 15);
          L.marker([latitude, longitude]).addTo(map)
            .bindPopup('Your Location')
            .openPopup();

          const coffeeShops = await placeSearch(latitude, longitude);

          const coffeeIcon = L.icon({
            iconUrl: 'https://example.com/custom-coffee-icon.png', 
            iconSize: [32, 32], 
            iconAnchor: [16, 32], 
            popupAnchor: [0, -32] 
          });

          coffeeShops.forEach(shop => {
            if (shop.geocodes && shop.geocodes.main) {
              const { latitude, longitude } = shop.geocodes.main;
              L.marker([latitude, longitude], { icon: coffeeIcon }).addTo(map)
                .bindPopup(`<strong>${shop.name}</strong><br>${shop.location.formatted_address || 'Address not available'}`);
            }
          });
        },
        (error) => {
          console.error('Error getting location', error);
          document.getElementById('map').innerHTML = '<p>Unable to retrieve your location.</p>';
        }
      );
    } else {
      document.getElementById('map').innerHTML = '<p>Geolocation is not supported by this browser.</p>';
    }
  });

  
document.getElementById('coffee-form').addEventListener('submit', async (event) => {
  event.preventDefault();

  const coffeeType = document.getElementById('coffee-type').value;
  const coffeeLocation = document.getElementById('coffee-location').value;
  const coffeeDistance = document.getElementById('coffee-distance').value;

  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(
      async (position) => {
        const latitude = position.coords.latitude;
        const longitude = position.coords.longitude;

        const coffeeShops = await placeSearch(latitude, longitude);
        console.log(coffeeShops);

        const coffeeShopsList = document.getElementById('coffee-shops-list');
        coffeeShopsList.innerHTML = '';

        coffeeShops.forEach(shop => {
          const shopElement = document.createElement('div');
          shopElement.classList.add('p-4', 'bg-[#333]', 'rounded-md', 'shadow-md');

          const shopName = document.createElement('h3');
          shopName.classList.add('text-xl', 'font-bold', 'mb-2');
          shopName.textContent = shop.name;

          const shopLocation = document.createElement('p');
          shopLocation.classList.add('text-lg', 'mb-1');
          shopLocation.textContent = `Location: ${shop.location.address}, ${shop.location.locality}`;

          const shopDistance = document.createElement('p');
          shopDistance.classList.add('text-lg', 'mb-1');
          shopDistance.textContent = `Distance: ${(shop.distance / 1000).toFixed(2)} km`;

          shopElement.appendChild(shopName);
          shopElement.appendChild(shopLocation);
          shopElement.appendChild(shopDistance);

          coffeeShopsList.appendChild(shopElement);
        });
      },
      (error) => {
        console.error('Error getting location', error);
      }
    );
  } else {
    console.error('Geolocation is not supported by this browser.');
  }
});
</script>
